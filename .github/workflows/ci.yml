name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags: ["v*"]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
      - ".vscode/**"
      - ".devcontainer/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write
  statuses: write
  packages: write

jobs:
  golangci-lint:
    uses: actionsforge/actions-golangci-lint/.github/workflows/golangci-lint.yml@v0

  govulncheck:
    uses: actionsforge/actions-govulncheck/.github/workflows/govulncheck.yml@v0

  test:
    uses: actionsforge/actions-go-test/.github/workflows/go-test.yml@v0
    with:
      test-pattern: "./cmd/server"

  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Check go mod tidy
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain)" ]; then
            echo "‚ùå go.mod or go.sum has uncommitted changes"
            git diff
            exit 1
          fi
          echo "‚úÖ go.mod is clean"

      - name: Build binary
        run: go build -v ./cmd/server

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate container build
        run: |
          # Test that the container builds successfully
          docker build -t go-hello-service:test .
          echo "‚úÖ Container builds successfully"

      - name: Validate container health check
        run: |
          # Test container health check
          docker run -d --name test-container go-hello-service:test
          sleep 10
          docker inspect test-container --format='{{.State.Health.Status}}'
          docker stop test-container
          docker rm test-container
          echo "‚úÖ Container health check works"

      - name: Security scan
        run: |
          # Basic security checks
          echo "üîç Checking for common security issues..."

          # Check for hardcoded secrets (basic check)
          if grep -r "password\|secret\|key\|token" cmd/ --exclude="*.go" 2>/dev/null; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found"
          fi

          # Check for proper error handling
          if ! grep -r "if err != nil" cmd/; then
            echo "‚ö†Ô∏è  Check error handling in code"
          fi

          echo "‚úÖ Basic security checks completed"

      - name: Validation Summary
        run: |
          echo "üéâ All validations passed!"
          echo "‚úÖ Go modules are clean"
          echo "‚úÖ Binary builds successfully"
          echo "‚úÖ Container builds successfully"
          echo "‚úÖ Container health check works"
          echo "‚úÖ Security checks completed"

  build-and-push:
    needs: [validate, golangci-lint, govulncheck, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/platformfuzz/go-hello-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
