name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags: ["v*"]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
      - ".vscode/**"
      - ".devcontainer/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write
  statuses: write
  packages: write

jobs:
  golangci-lint:
    uses: actionsforge/actions-golangci-lint/.github/workflows/golangci-lint.yml@v0

  govulncheck:
    uses: actionsforge/actions-govulncheck/.github/workflows/govulncheck.yml@v0

  test:
    uses: actionsforge/actions-go-test/.github/workflows/go-test.yml@v0
    with:
      test-pattern: "./cmd/server"

  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
          cache: true

      - name: Check go mod tidy
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ go.mod or go.sum has uncommitted changes"
            git diff
            exit 1
          fi
          echo "✅ go.mod is clean"

      - name: Build binary
        run: go build -v ./cmd/server

      - name: Install ko
        uses: ko-build/setup-ko@v0.9

      - name: Validate container build
        run: |
          # Test that the container builds successfully (local only)
          ko build --local ./cmd/server
          echo "✅ Container builds successfully"

      - name: Validate multi-platform build
        run: |
          # Test multi-platform build (local only)
          ko build --local --platform=linux/amd64,linux/arm64 ./cmd/server
          echo "✅ Multi-platform build successful"

      - name: Security scan
        run: |
          # Basic security checks
          echo "🔍 Checking for common security issues..."

          # Check for hardcoded secrets (basic check)
          if grep -r "password\|secret\|key\|token" cmd/ --exclude="*.go" 2>/dev/null; then
            echo "⚠️  Potential hardcoded secrets found"
          fi

          # Check for proper error handling
          if ! grep -r "if err != nil" cmd/; then
            echo "⚠️  Check error handling in code"
          fi

          echo "✅ Basic security checks completed"

      - name: Validation Summary
        run: |
          echo "🎉 All validations passed!"
          echo "✅ Go modules are clean"
          echo "✅ Binary builds successfully"
          echo "✅ Container builds successfully"
          echo "✅ Multi-platform build works"
          echo "✅ Security checks completed"

  build-and-push:
    needs: [validate, golangci-lint, govulncheck, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
          cache: true

      - name: Install ko
        uses: ko-build/setup-ko@v0.9

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Use tag version
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using tag version: $VERSION"
          else
            # Auto-increment based on commit messages and latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

            # Parse latest tag
            if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]}
              PATCH=${BASH_REMATCH[3]}
            else
              MAJOR=0
              MINOR=0
              PATCH=0
            fi

            # Check commit messages since last tag for semantic versioning
            COMMITS_SINCE_TAG=$(git log --oneline $LATEST_TAG..HEAD 2>/dev/null || git log --oneline)

            # Determine version bump based on commit types
            MAJOR_BUMP=false
            MINOR_BUMP=false
            PATCH_BUMP=false

            while IFS= read -r commit; do
              if [[ $commit =~ ^[a-f0-9]+\s+(breaking|BREAKING|feat|FEAT|major|MAJOR) ]]; then
                MAJOR_BUMP=true
                break
              elif [[ $commit =~ ^[a-f0-9]+\s+(feat|FEAT|feature|FEATURE|minor|MINOR) ]]; then
                MINOR_BUMP=true
              elif [[ $commit =~ ^[a-f0-9]+\s+(fix|FIX|patch|PATCH|bug|BUG) ]]; then
                PATCH_BUMP=true
              fi
            done <<< "$COMMITS_SINCE_TAG"

            # Apply version bumps
            if [ "$MAJOR_BUMP" = true ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ "$MINOR_BUMP" = true ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif [ "$PATCH_BUMP" = true ]; then
              PATCH=$((PATCH + 1))
            else
              # Default to patch bump for any commit
              PATCH=$((PATCH + 1))
            fi

            VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Auto-generated version: $VERSION (from $LATEST_TAG)"
            echo "Commit analysis: MAJOR=$MAJOR_BUMP, MINOR=$MINOR_BUMP, PATCH=$PATCH_BUMP"
          fi

      - name: Build and push
        run: |
          # Build and push with version tag and latest
          IMAGE_REF=$(ko build ./cmd/server --platform=linux/amd64,linux/arm64 --tags ${{ steps.version.outputs.version }},latest --repository ghcr.io/platformfuzz/go-hello-service)
